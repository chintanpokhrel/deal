/*
 * Deal
 *
 * Limited time deals
 *
 * OpenAPI spec version: 1.0.0
 * Contact: chintan@pokhrel.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.DataAccess;
using System.Linq;
using System.Globalization;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DealApiController : ControllerBase
    { 
        private SqlContext _context;
        /// <summary>
        /// Create an instance of <see cref="DealApiController"/>
        /// </summary>
        public DealApiController(SqlContext context) => _context = context;

        /// <summary>
        /// Add a new deal
        /// </summary>
        /// <param name="body">Deal object that needs to be saved</param>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/deal/deal")]
        [ValidateModelState]
        [SwaggerOperation("AddDeal")]
        public virtual IActionResult AddDeal([FromBody]Deal body)
        { 
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);
            if(dealExists(body)) 
            {
                Console.WriteLine("Deal exists");
                if(!dealIsExpired(body)) 
                {
                    return StatusCode(400); // TODO add responseobject
                }
            }
            Console.WriteLine("About to create deal");

            createDeal(body);
            return StatusCode(200);
        }

        private void createDeal(Deal body)
        {
            _context.deals.Add(body);
            _context.SaveChanges();
        }

        private bool dealIsExpired(Deal body)
        {
            Deal deal = _context.deals.Where(deal=>deal.ItemId == body.ItemId).FirstOrDefault();
            string time = DateTime.Now.ToString("YYYYMMDDHHMMSS");
            if(String.Compare(deal.DealExpiry, time) < 0) 
            {
                return true;
            }

            return false;
        }

        private bool dealExists(Deal body)
        {
            // also check if deal exists with same id
            if(_context.deals.Where(deal=>deal.Id == body.Id).Count() > 0) {
                return true;
            }

            return _context.deals.Where(deal=>deal.ItemId == body.ItemId).Count() > 0;
        }

        /// <summary>
        /// Claim a deal
        /// </summary>
        /// <param name="body">Deal object that needs to be saved</param>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/deal/deal/claim")]
        [ValidateModelState]
        [SwaggerOperation("ClaimDeal")]
        public virtual IActionResult ClaimDeal([FromBody]DealClaim body)
        { 
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);
            if(dealFullyClaimed(body) || dealExpired(body) || dealClaimedByUser(body)) 
            {
                return StatusCode(400);
            }
            
            createClaim(body);
            return StatusCode(200);
        }

        private void createClaim(DealClaim body)
        {
            _context.dealClaims.Add(body);
            _context.SaveChanges();
        }

        private bool dealClaimedByUser(DealClaim body)
        {
            throw new NotImplementedException();
        }

        private bool dealExpired(DealClaim body)
        {
            throw new NotImplementedException();
        }

        private bool dealFullyClaimed(DealClaim body)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Update an existing deal
        /// </summary>
        /// <param name="body">Deal object, only totalItems and dealExpiry are updated, rest are ignored</param>
        /// <response code="400">Invalid input</response>
        /// <response code="404">Deal  not found</response>
        [HttpPut]
        [Route("/deal/deal")]
        [ValidateModelState]
        [SwaggerOperation("UpdateDeal")]
        public virtual IActionResult UpdateDeal([FromBody]Deal body)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }
    }
}
